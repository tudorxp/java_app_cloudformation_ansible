{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Blockwizard exercise stack",
	"Parameters": {
		"KeyName": {
			"Description": "Key Pair name",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Default": "my_key"
		},
		"TagName": {
			"Description": "Value of the Name tag which will be attached to the Resources defined by this",
			"Type": "String",
			"Default": "blockwizard_exercise"
		}
	},
	"Mappings": {
		"UbuntuEC2RegionMap": {
			"eu-west-1": {"UbuntuBionicServer20190514": "ami-0b2a4d260c54e8d3d"},
			"eu-west-2": {"UbuntuBionicServer20190514": "ami-09dd110e91f421069"},
			"eu-west-3": {"UbuntuBionicServer20190514": "ami-00e557eb4a269bf1c"},
			"us-east-1": {"UbuntuBionicServer20190514": "ami-024a64a6685d05041"},
			"us-west-1": {"UbuntuBionicServer20190514": "ami-040dfc3ebf1bfc4f6"},
			"us-west-2": {"UbuntuBionicServer20190514": "ami-0196ce5c34425a906"}
		},
		"BitnamiELKAMIRegionMap": {
			"eu-west-1": {"BitnamiELKUbuntu": "ami-09042ed73f317e3c7"},
			"eu-west-2": {"BitnamiELKUbuntu": "ami-0e895d1f2d34665b2"},
			"eu-west-3": {"BitnamiELKUbuntu": "ami-04a36b72f964a2c30"},
			"us-east-1": {"BitnamiELKUbuntu": "ami-00707c44c0192abc4"},
			"us-west-1": {"BitnamiELKUbuntu": "ami-0e55ae152d974b9f8"},
			"us-west-2": {"BitnamiELKUbuntu": "ami-00b4112dfbac88e15"}
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"CidrBlock": "10.42.0.0/16",
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			}
		},
		"Subnet": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
				"CidrBlock": "10.42.42.0/24",
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			}
		},
		"GatewayToInternet": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"RouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			}
		},
		"InternetRoute": {
			"Type": "AWS::EC2::Route",
			"Properties": {
				"RouteTableId": {
					"Ref": "RouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			},
			"DependsOn": "GatewayToInternet"			
		},
		"RouteTableAssociation": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet"
				},
				"RouteTableId": {
					"Ref": "RouteTable"
				}
			}
		},
		"NetworkAcl": {
			"Type": "AWS::EC2::NetworkAcl",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			}
		},
		"NetworkAceSSH": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "10",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "22",
					"To": "22"
				}
			}
		},
		"NetworkAceHTTP": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "11",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "80",
					"To": "80"
				}
			}
		},
		"NetworkAceNTP": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "20",
				"Protocol": "17",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "123",
					"To": "123"
				}
			}
		},
		"NetworkAceICMP": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "30",
				"Protocol": "1",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"Icmp": {
					"Code": "-1",
					"Type": "-1"
				}
			}
		},
		"NetworkAceHighPortsTCP": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "40",
				"Protocol": "6",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"NetworkAceHighPortsUDP": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "41",
				"Protocol": "17",
				"RuleAction": "allow",
				"Egress": "false",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "1024",
					"To": "65535"
				}
			}
		},
		"NetworkAceEgress": {
			"Type": "AWS::EC2::NetworkAclEntry",
			"Properties": {
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				},
				"RuleNumber": "10",
				"Protocol": "-1",
				"RuleAction": "allow",
				"Egress": "true",
				"CidrBlock": "0.0.0.0/0",
				"PortRange": {
					"From": "0",
					"To": "65535"
				}
			}
		},
		"NetworkAclAssociation": {
			"Type": "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "Subnet"
				},
				"NetworkAclId": {
					"Ref": "NetworkAcl"
				}
			}
		},
		"SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "SecurityGroup_for_blockwizard_exercise",
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ],
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "16000",
						"ToPort": "16000",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "16001",
						"ToPort": "16002",
						"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "9200",
						"ToPort": "9200",
						"CidrIp": { "Fn::GetAtt" : [ "VPC", "CidrBlock" ] }
					},
					{
						"IpProtocol": "icmp",
						"FromPort": "-1",
						"ToPort": "-1",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"ElasticIPBroker": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {"Ref": "Broker"},
				"Domain": "vpc"
			},
			"DependsOn": "GatewayToInternet"
		},
		"ElasticIPNode1": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {"Ref": "Node1"},
				"Domain": "vpc"
			},
			"DependsOn": "GatewayToInternet"
		},
		"ElasticIPNode2": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {"Ref": "Node2"},
				"Domain": "vpc"
			},
			"DependsOn": "GatewayToInternet"
		},
		"ElasticIPELK": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"InstanceId": {"Ref": "ELK"},
				"Domain": "vpc"
			},
			"DependsOn": "GatewayToInternet"
		},			
		"Broker": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["UbuntuEC2RegionMap", {"Ref": "AWS::Region"}, "UbuntuBionicServer20190514"]},
				"InstanceType": "t2.micro",
				"KeyName": {"Ref": "KeyName"},
				"SecurityGroupIds": [{"Ref": "SecurityGroup"}],
				"SubnetId": {"Ref": "Subnet"},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			},
			"DependsOn": "GatewayToInternet"
		},
		"Node1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["UbuntuEC2RegionMap", {"Ref": "AWS::Region"}, "UbuntuBionicServer20190514"]},
				"InstanceType": "t2.micro",
				"KeyName": {"Ref": "KeyName"},
				"SecurityGroupIds": [{"Ref": "SecurityGroup"}],
				"SubnetId": {"Ref": "Subnet"},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			},
			"DependsOn": "GatewayToInternet"
		},
		"Node2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["UbuntuEC2RegionMap", {"Ref": "AWS::Region"}, "UbuntuBionicServer20190514"]},
				"InstanceType": "t2.micro",
				"KeyName": {"Ref": "KeyName"},
				"SecurityGroupIds": [{"Ref": "SecurityGroup"}],
				"SubnetId": {"Ref": "Subnet"},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			},
			"DependsOn": "GatewayToInternet"
		},
		"ELK": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {"Fn::FindInMap": ["BitnamiELKAMIRegionMap", {"Ref": "AWS::Region"}, "BitnamiELKUbuntu"]},
				"InstanceType": "t3.medium",
				"KeyName": {"Ref": "KeyName"},
				"SecurityGroupIds": [{"Ref": "SecurityGroup"}],
				"SubnetId": {"Ref": "Subnet"},
				"Tags": [ {	"Key": "Name", "Value" : { "Ref": "TagName" } } ]
			},
			"DependsOn": "GatewayToInternet"
		},		
		"RecoveryAlarmBroker": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Recover server when underlying hardware fails.",
				"Namespace": "AWS/EC2" ,
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "5",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [{"Fn::Join": ["", ["arn:aws:automate:", { "Ref": "AWS::Region"}, ":ec2:recover"]]}],
				"Dimensions": [{"Name": "InstanceId", "Value": {"Ref": "Broker"}}]
			}
	    },
		"RecoveryAlarmNode1": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Recover server when underlying hardware fails.",
				"Namespace": "AWS/EC2" ,
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "5",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [{"Fn::Join": ["", ["arn:aws:automate:", { "Ref": "AWS::Region"}, ":ec2:recover"]]}],
				"Dimensions": [{"Name": "InstanceId", "Value": {"Ref": "Node1"}}]
			}
	    },
		"RecoveryAlarmNode2": {
			"Type": "AWS::CloudWatch::Alarm",
			"Properties": {
				"AlarmDescription": "Recover server when underlying hardware fails.",
				"Namespace": "AWS/EC2" ,
				"MetricName": "StatusCheckFailed_System",
				"Statistic": "Minimum",
				"Period": "60",
				"EvaluationPeriods": "5",
				"ComparisonOperator": "GreaterThanThreshold",
				"Threshold": "0",
				"AlarmActions": [{"Fn::Join": ["", ["arn:aws:automate:", { "Ref": "AWS::Region"}, ":ec2:recover"]]}],
				"Dimensions": [{"Name": "InstanceId", "Value": {"Ref": "Node2"}}]
			}
	    }	    
	},
	"Outputs": {
		"BrokerIP": {
			"Description": "IPs to access the defined EC2 hosts",
			"Value": { "Ref": "ElasticIPBroker" }
		},
		"Node1IP": {
			"Description": "IPs to access the defined EC2 hosts",
			"Value": { "Ref": "ElasticIPNode1" }
		},
		"Node2IP": {
			"Description": "IPs to access the defined EC2 hosts",
			"Value": { "Ref": "ElasticIPNode2" }
		},
		"ELKIP": {
			"Description": "IPs to access the defined EC2 hosts",
			"Value": { "Ref": "ElasticIPELK" }
		}				
	}
}
